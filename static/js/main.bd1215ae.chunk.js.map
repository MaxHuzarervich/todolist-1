{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","trimmedTitle","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","size","IconButton","onClick","color","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","changeTitle","onDoubleClick","TodoList","filter","tasksJSXElements","tasks","map","t","taskClasses","isDone","className","Checkbox","checked","changeTaskStatus","id","todoListID","changeTaskTitle","removeTask","Delete","changeTodolistTitle","removeTodolist","addTask","style","listStyle","paddingLeft","ButtonGroup","Button","changeFilter","marginLeft","App","todoListID_1","v1","todoListID_2","todoLists","setTodoLists","setTasks","taskID","newTask","newIsDoneValue","newTitle","tl","getTasksForTodolist","todoList","todoListsComponents","Grid","item","Paper","elevation","padding","borderRadius","border","AppBar","position","Toolbar","justifyContent","Menu","Typography","Container","fixed","container","newTodolistID","newTodolist","spacing","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.bd1215ae.chunk.js","sourcesContent":["import React, {useState, KeyboardEvent, ChangeEvent} from 'react';\r\nimport {AddBox, Delete} from \"@material-ui/icons\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nfunction AddItemForm(props: AddItemFormPropsType) {\r\n    const [title, setTitle] = useState('')\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n    const addItem = () => {\r\n        const trimmedTitle = title.trim()  //удаляет у строки все пробелы с двух сторон\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle)\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setTitle('') //чтобы поле очищалось после добавления новой таски.\r\n\r\n    }\r\n    const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addItem()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={'outlined'}\r\n                error={error}\r\n                value={title}\r\n                onChange={onChangeTitle}\r\n                onKeyPress={onKeyPressAddItem}\r\n                label={'Title'}\r\n                helperText={error && 'Title is required!'}\r\n                size={'small'}\r\n            />\r\n            <IconButton onClick={addItem} color={'primary'}>\r\n                <AddBox/>\r\n            </IconButton>\r\n            {/*{errorMessage}*/}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddItemForm;","import React, {useState, KeyboardEvent, ChangeEvent} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string,\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nfunction EditableSpan(props: EditableSpanPropsType) {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState(props.title)\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                color={'primary'}\r\n                variant={'filled'}\r\n                value={title}\r\n                autoFocus\r\n                onChange={onChangeTitle}\r\n                onBlur={offEditMode}/>\r\n\r\n            : <span onDoubleClick={onEditMode}>  {props.title}  </span>\r\n    )\r\n}\r\n\r\nexport default EditableSpan;","import React, {useState, KeyboardEvent, ChangeEvent} from 'react';\r\nimport {FilterValuesType, TaskType} from './App';\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport EditableSpan from \"./EditableSpan\";\r\nimport {Button, ButtonGroup, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\ntype TodoListPropsType = {\r\n    todoListID: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    addTask: (title: string, todoListID: string) => void\r\n    removeTask: (taskID: string, todoListID: string) => void    //отсутствие объявленного return\r\n    changeFilter: (value: FilterValuesType, todoListID: string) => void  //отсутствие объявленного return\r\n    changeTaskStatus: (taskId: string, newIsDoneValue: boolean, todoListID: string) => void\r\n    removeTodolist: (todoListID: string) => void\r\n    changeTaskTitle: (taskID: string, newTitle: string, todoListID: string) => void\r\n    changeTodolistTitle: (title: string, todoListID: string) => void\r\n}\r\n\r\nfunction TodoList(props: TodoListPropsType) {\r\n\r\n    const {filter} = props\r\n\r\n    const tasksJSXElements = props.tasks.map(t => {\r\n\r\n        const taskClasses = t.isDone ? 'is-done' : '';\r\n\r\n        const removeTask = () => props.removeTask(t.id, props.todoListID);\r\n\r\n        const changeTaskTitle = (title: string) => props.changeTaskTitle(t.id, title, props.todoListID)\r\n\r\n        return <li className={taskClasses} key={t.id}>\r\n            <span className={taskClasses}>\r\n                <Checkbox\r\n                color={'primary'}\r\n                checked={t.isDone}\r\n                onChange={(e) => {\r\n                    props.changeTaskStatus(t.id, e.currentTarget.checked, props.todoListID)\r\n                }}/>\r\n\r\n                {/*<input onChange={(e) => {*/}\r\n                {/*    props.changeTaskStatus(t.id, e.currentTarget.checked, props.todoListID)*/}\r\n                {/*}}*/}\r\n                {/*       type=\"checkbox\"*/}\r\n                {/*       checked={t.isDone}/>*/}\r\n            <EditableSpan title={t.title} changeTitle={changeTaskTitle}/>\r\n            </span>\r\n\r\n            <IconButton onClick={removeTask}\r\n                        color={'secondary'}\r\n            >\r\n                <Delete/>\r\n            </IconButton>\r\n        </li>\r\n    })\r\n\r\n\r\n    const onClickAllFilter = () => props.changeFilter(\"all\", props.todoListID)\r\n\r\n    const onClickActiveFilter = () => props.changeFilter(\"active\", props.todoListID)\r\n\r\n    const onClickCompletedFilter = () => props.changeFilter(\"completed\", props.todoListID)\r\n\r\n    const onClickRemoveTodolist = () => props.removeTodolist(props.todoListID)\r\n\r\n    const addTask = (title: string) => props.addTask(title, props.todoListID)\r\n\r\n    const changeTodolistTitle = (title: string) => props.changeTodolistTitle(title, props.todoListID)\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h3>\r\n                    <EditableSpan title={props.title} changeTitle={changeTodolistTitle}/>\r\n                    <IconButton onClick={onClickRemoveTodolist}\r\n                                color={'secondary'}>\r\n                        <Delete/>\r\n                    </IconButton>\r\n                </h3>\r\n                <AddItemForm addItem={addTask}/>\r\n                <ul style={{listStyle: 'none', paddingLeft: '0px'}}>\r\n                    {tasksJSXElements}\r\n                </ul>\r\n                <div>\r\n                    <ButtonGroup>\r\n                        <Button size={'small'}\r\n                                variant={filter === 'all' ? 'contained' : 'text'}\r\n                                color={'primary'}\r\n                                onClick={onClickAllFilter}>All</Button>\r\n                        <Button size={'small'}\r\n                                style={{marginLeft: 3}}\r\n                                variant={filter === 'active' ? 'contained' : 'text'}\r\n                                color={'primary'}\r\n                                onClick={onClickActiveFilter}>Active\r\n                        </Button>\r\n                        <Button size={'small'}\r\n                                style={{marginLeft: 3}}\r\n                                variant={filter === 'completed' ? 'contained' : 'text'}\r\n                                color={'primary'}\r\n                                onClick={onClickCompletedFilter}>Completed\r\n                        </Button>\r\n                    </ButtonGroup>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoList;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport TodoList from './todolist';\r\nimport {v1} from \"uuid\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\nexport type TaskType = {\r\n    id: string                          //меняем на string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'  // типизируем переменную filter\r\n\r\ntype TodolistType = {\r\n    id: string,\r\n    title: string,\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TaskStateType = {\r\n    [key: string]: Array<TaskType>          //типизация для вычисляемого значения\r\n}\r\n\r\nfunction App() {\r\n//BLL:\r\n\r\n    const todoListID_1 = v1()\r\n    const todoListID_2 = v1()\r\n\r\n    const [todoLists, setTodoLists] = useState<Array<TodolistType>>([\r\n        {id: todoListID_1, title: 'What to learn', filter: 'all'},\r\n        {id: todoListID_2, title: 'What to buy', filter: 'all'},\r\n    ])\r\n\r\n    const [tasks, setTasks] = useState<TaskStateType>({\r\n        [todoListID_1]: [\r\n            {id: v1(), title: 'HTML', isDone: true}, //true                  //импортируем v1() alt+enter\r\n            {id: v1(), title: 'CSS', isDone: false},  //true\r\n            {id: v1(), title: 'React', isDone: true},\r\n        ],\r\n        [todoListID_2]: [\r\n            {id: v1(), title: 'Milk', isDone: true}, //true                  //импортируем v1() alt+enter\r\n            {id: v1(), title: 'Meat', isDone: true},  //true\r\n            {id: v1(), title: 'Bread', isDone: true},\r\n        ]\r\n\r\n    })\r\n\r\n    function removeTask(taskID: string, todoListID: string) {\r\n        tasks[todoListID] = tasks[todoListID].filter(t => t.id !== taskID)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function addTask(title: string, todoListID: string) {\r\n        const newTask: TaskType = {\r\n            id: v1(),\r\n            title: title,\r\n            isDone: false\r\n        }\r\n        setTasks({...tasks, [todoListID]: [newTask, ...tasks[todoListID]]})\r\n    }\r\n\r\n    function changeTaskStatus(taskID: string, newIsDoneValue: boolean, todoListID: string) {\r\n        tasks[todoListID] = tasks[todoListID].map(t => t.id === taskID ? {...t, isDone: newIsDoneValue} : t)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeTaskTitle(taskID: string, newTitle: string, todoListID: string) {\r\n        tasks[todoListID] = tasks[todoListID].map(t => t.id === taskID ? {...t, title: newTitle} : t)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todoListID: string) {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListID ? {...tl, filter: value} : tl))\r\n    }\r\n\r\n    function changeTodolistTitle(title: string, todoListID: string) {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListID ? {...tl, title: title} : tl))\r\n    }\r\n\r\n    function getTasksForTodolist(todoList: TodolistType) {\r\n\r\n        switch (todoList.filter) {\r\n            case \"active\":\r\n                return tasks[todoList.id].filter(t => !t.isDone)\r\n            case \"completed\":\r\n                return tasks[todoList.id].filter(t => t.isDone)\r\n            default:\r\n                return tasks[todoList.id]\r\n        }\r\n    }\r\n\r\n    function removeTodolist(todoListID: string) {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListID))\r\n    }\r\n\r\n    function addTodolist(title: string) {\r\n        const newTodolistID = v1()\r\n        const newTodolist:\r\n            TodolistType = {id: newTodolistID, title: title, filter: 'all'}\r\n        setTodoLists([...todoLists, newTodolist])\r\n        setTasks({...tasks, [newTodolistID]: []})\r\n    }\r\n\r\n    const todoListsComponents = todoLists.map(tl => {\r\n\r\n            return (\r\n                <Grid item key={tl.id}>\r\n                    <Paper elevation={10}\r\n                           style={{padding: '15px', borderRadius: '10px',border:'1px solid lightblue'}}>\r\n                        <TodoList\r\n                            key={tl.id}                   //id for react мы его не используем\r\n                            todoListID={tl.id}\r\n                            title={tl.title}\r\n                            tasks={getTasksForTodolist(tl)}\r\n                            filter={tl.filter}\r\n                            addTask={addTask}\r\n                            removeTask={removeTask}\r\n                            changeFilter={changeFilter}\r\n                            changeTaskStatus={changeTaskStatus}\r\n                            removeTodolist={removeTodolist}\r\n                            changeTaskTitle={changeTaskTitle}\r\n                            changeTodolistTitle={changeTodolistTitle}\r\n                        />\r\n                    </Paper>\r\n                </Grid>\r\n            )\r\n        }\r\n    )\r\n\r\n    //UI:\r\n    return (\r\n        <div>\r\n            <AppBar position={'static'}>\r\n                <Toolbar style={{justifyContent: 'space-between'}}>\r\n                    <IconButton color={'inherit'}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={'h6'}>\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button color={'inherit'}\r\n                            variant={'outlined'}\r\n                    >Login\r\n                    </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px 0px '}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todoListsComponents}\r\n                </Grid>\r\n            </Container>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}