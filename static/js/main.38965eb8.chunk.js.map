{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","utils/error-utils.tsx","login/auth-reducer.ts","app/app-reducer.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","login/login.tsx","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistList/Todolist/Task/Task.tsx","features/tasks-reducer.ts","features/TodolistList/Todolist/todolist.tsx","features/todolists-reducer.tsx","app/TodolistList.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistApi","get","title","post","todolistId","delete","put","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","Alert","props","elevation","variant","ErrorSnackbar","useSelector","state","app","useDispatch","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","then","res","resultCode","catch","to","Grid","container","justifyContent","item","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","TextField","label","margin","getFieldProps","errors","FormControlLabel","control","Checkbox","checked","color","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trimmedTitle","trim","onChange","e","currentTarget","onKeyPress","key","helperText","size","IconButton","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","changeTitle","onDoubleClick","Task","taskClasses","task","Completed","onTitleChangeHandler","useCallback","changeTaskTitle","id","todoListID","className","newIsDoneValue","changeTaskStatus","New","removeTask","Delete","tasksReducer","action","todoListTasks","todoListId","filter","stateCopy","newTask","tasks","newTasks","map","taskID","newTitle","todolist","newState","copyState","todoLists","forEach","tl","removeTaskAC","addTaskAC","updateTaskAC","updateTaskTC","domainModel","getState","find","t","apiModel","deadline","description","priority","startDate","console","warn","TodoList","useEffect","items","SetTasksAC","onClickAllFilter","changeFilter","onClickActiveFilter","onClickCompletedFilter","onClickRemoveTodolist","removeTodolist","addTask","changeTodolistTitle","tasksForTodolist","newValue","entityStatus","style","listStyle","paddingLeft","ButtonGroup","Button","marginLeft","todoListsReducer","newTodolist","RemoveTodoListsAC","AddTodoListAC","ChangeTodoListTitleAC","ChangeTodoListFilterAC","TodolistList","thunk","removeTaskTC","addTaskTC","changeTodolistTitleTC","addTodolist","addTodolistTC","padding","spacing","Paper","borderRadius","border","App","logoutHandler","AppBar","position","Toolbar","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","width","CircularProgress","rootReducer","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.38965eb8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. app is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\n\r\n//axios создай на своей основе конкретный экземпляр\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '09fdfea4-0315-4da1-8525-2baf0617aa13'\r\n    }\r\n})\r\n\r\n//если D не передавать то это пустой объект (ДЖЕНЕРИК тип)\r\nexport type ResponseType<D = {}> = {\r\n    // fieldsErrors: Array<string>,\r\n    resultCode: number,\r\n    messages: Array<string>,\r\n    data: D\r\n}\r\nexport type TodolistType = {\r\n    id: string,\r\n    addedDate: string,\r\n    order: number,\r\n    title: string\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New,\r\n    InProgress,\r\n    Completed,\r\n    Draft\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    Later\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string,\r\n    title: string,\r\n    status: TaskStatuses,\r\n    priority: TaskPriorities,\r\n    startDate: string,\r\n    deadline: string,\r\n    id: string,\r\n    todoListId: string,\r\n    order: number,\r\n    addedDate: string\r\n}\r\ntype GetTaskResponse = {\r\n    error: string,\r\n    totalCount: number,\r\n    items: TaskType[]\r\n}\r\ntype DeleteTask = {\r\n    resultCode: number,\r\n    messages: Array<string>\r\n    data: {}\r\n}\r\nexport type CreateUpdateTaskResponse<T = {}> = {\r\n    resultCode: number,\r\n    messages: Array<string>,\r\n    data: T\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\n//объект, который будет заниматься запросами на сервер!\r\nexport const todolistApi = {\r\n    getTodoLists() {\r\n        return instance.get<Array<TodolistType>>('todo-lists')\r\n    },\r\n    createTodo(title: string) {                 // уточняем D - TodolistType\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title})\r\n    },\r\n    deleteTodo(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodoTitle(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTaskResponse>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<DeleteTask>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<CreateUpdateTaskResponse<{ item: TaskType }>>(`/todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {                                         //делаем запрос на 'auth/login' и отправляем data\r\n        const promise = instance.post<ResponseType<{ userId?: number }>>('auth/login', data)\r\n        return promise\r\n    },\r\n    logout() {\r\n        const promise = instance.delete<ResponseType<{ userId?: number }>>('auth/login')\r\n        return promise\r\n    },\r\n    me() {\r\n        const promise = instance.get<ResponseType<{ id: number, email: string, login: string }>>('auth/me')\r\n        return promise\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {setAppErrorAC, setAppStatusAC, SetErrorActionType, SetStatusActionType} from \"../app/app-reducer\";\r\nimport {ResponseType} from \"../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport const handleServerAppError = (data: ResponseType, dispatch: Dispatch <SetErrorActionType | SetStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        setAppErrorAC('some error occurred')\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch <SetErrorActionType | SetStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message: 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}","import {authAPI, LoginParamsType} from \"../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setAppStatusAC, SetErrorActionType, SetStatusActionType} from \"../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\ntype setIsLoggedInAT = {\r\n    type: 'login/SET-IS-LOGGED-IN',\r\n    value: boolean\r\n}\r\ntype ActionsType = setIsLoggedInAT\r\ntype initialStateType = {\r\n    isLoggedIn: boolean,\r\n}\r\nconst initialState: initialStateType = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const authReducer = (state: initialStateType = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"login/SET-IS-LOGGED-IN\":\r\n            return {...state, isLoggedIn: action.value} // подменяем в state значение isLoggedIn\r\n        // на то которое сидит в экшене под значением value\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//actions\r\nexport const setIsLoggedInAC = (value: boolean) => ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n//THUNK - ф-ция которая делает асинхронную операцию и по итогу диспатчит экшн\r\n//thunkCreator\r\n\r\nexport const loginTC = (data: LoginParamsType) => {\r\n    return (dispatch: Dispatch<ActionsType | SetStatusActionType | SetErrorActionType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        authAPI.login(data)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(setIsLoggedInAC(true))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n//замыкание - здесь наша санка использует параметры из TC           !!!!!!!\r\n\r\nexport const logoutTC = () => {\r\n    return (dispatch: Dispatch<ActionsType | SetStatusActionType | SetErrorActionType>) => {\r\n        debugger\r\n        dispatch(setAppStatusAC('loading'))\r\n        authAPI.logout()\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(setIsLoggedInAC(false))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\n","import React from \"react\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolist-api\";\r\nimport {setIsLoggedInAC} from \"../login/auth-reducer\";\r\n\r\nexport const initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-IS-INITIALIZED':\r\n            return {...state, isInitialized: action.value}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\n//actions\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const SetAppInitializedAC = (value: boolean) => ({type: 'APP/SET-IS-INITIALIZED', value} as const)\r\n\r\n//thunk\r\n\r\nexport const initializedAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))   //залогинены\r\n            } else {\r\n\r\n            }debugger\r\n            dispatch(SetAppInitializedAC(true))\r\n        })\r\n}\r\n\r\n//types\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type InitialStateType = {\r\n    //происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType,\r\n    //если произойдет какая-то глобальная ошибка - мы запишем текст ошибки сюда\r\n    error: null | string,\r\n    //true когда приложение проинициализировалось (проверили юзера, настройки проверили и т.д.)\r\n    isInitialized: boolean\r\n}\r\n\r\nexport type SetErrorActionType = ReturnType<typeof setAppErrorAC>;\r\nexport type SetStatusActionType = ReturnType<typeof setAppStatusAC>;\r\nexport type SetAppInitializedActionType = ReturnType<typeof SetAppInitializedAC>\r\nexport type ActionsType = SetErrorActionType | SetStatusActionType | SetAppInitializedActionType","import * as React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    const isOpen = error !== null     //если error не равен null то открыто\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {AppRootStateType} from \"../app/store\";\r\nimport {Redirect} from \"@reach/router\";\r\n\r\nexport const Login = () => {\r\n    debugger\r\n    const dispatch = useDispatch()\r\n    //залогинены или нет? если нет, то возвращаем форму логина\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            }\r\n        },\r\n        initialValues: {     // инициализационные значения которые покажутся в форме\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {  // коллбек в который придут все значения которые форма собрала во время своего сабмита\r\n            dispatch(loginTC(values)) //санка отправляет данные на сервер\r\n        },\r\n    });\r\n\r\n    if (isLoggedIn) { debugger                    //если мы не залогинены, то код идет дальше и возвращает форму логина\r\n        return <Redirect to={'/'}/>      // и наоборот если залогинены редиректит к тудулистам)\r\n    }\r\n    debugger\r\n    return <>\r\n    <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'} rel=\"noreferrer\"> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')} //значение checked берем из --->\r\n                                checked={formik.values.rememberMe}/>}/>\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n    </>\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {AddBox} from \"@material-ui/icons\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(({addItem, disabled = false}:AddItemFormPropsType) => {\r\n    const [title, setTitle] = useState('')\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n    const addItemHandler = () => {\r\n        const trimmedTitle = title.trim()  //удаляет у строки все пробелы с двух сторон\r\n        if (trimmedTitle) {\r\n            addItem(trimmedTitle)\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setTitle('') //чтобы поле очищалось после добавления новой таски.\r\n\r\n    }\r\n    const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        // if(error !== null) setError(null)\r\n        if (e.key === 'Enter') {\r\n            addItemHandler()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                disabled={disabled}\r\n                variant={'outlined'}\r\n                error={error}\r\n                value={title}\r\n                onChange={onChangeTitle}\r\n                onKeyPress={onKeyPressAddItem}\r\n                label={'Title'}\r\n                helperText={error && 'Title is required!'}\r\n                size={'small'}\r\n            />\r\n            <IconButton onClick={addItemHandler} color={'primary'} disabled={disabled}>\r\n                <AddBox/>\r\n            </IconButton>\r\n            {/*{errorMessage}*/}\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default AddItemForm;","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string,\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState(props.title)\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                color={'primary'}\r\n                variant={'filled'}\r\n                value={title}\r\n                autoFocus\r\n                onChange={onChangeTitle}\r\n                onBlur={offEditMode}/>\r\n\r\n            : <span onDoubleClick={onEditMode}>  {props.title}  </span>\r\n    )\r\n})\r\n\r\nexport default EditableSpan;","import {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport EditableSpan from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport React, {ChangeEvent, useCallback} from \"react\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolist-api\";\r\n\r\ntype TaskPropsType = {\r\n    todoListID: string\r\n    task: TaskType,\r\n    removeTask: (taskID: string, todoListID: string) => void,\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todoListID: string) => void,\r\n    changeTaskTitle: (taskID: string, newTitle: string, todoListID: string) => void\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const taskClasses = props.task.status === TaskStatuses.Completed ? 'is-done' : '';\r\n\r\n    function onClickHandler() {\r\n        props.removeTask(props.task.id, props.todoListID)       //delete task\r\n    }\r\n\r\n    const onTitleChangeHandler = useCallback((title: string) => {\r\n        props.changeTaskTitle(props.task.id, title, props.todoListID)  //change task title\r\n    }, [props.changeTaskTitle, props.todoListID, props.task.id])\r\n\r\n    function onChangeHandler(e: ChangeEvent<HTMLInputElement>) {\r\n        const newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todoListID) //change task status\r\n    }\r\n\r\n    return (\r\n        <li className={taskClasses} key={props.task.id}>\r\n            <span className={taskClasses}>\r\n                <Checkbox\r\n                    color={'primary'}\r\n                    checked={props.task.status === TaskStatuses.Completed}\r\n                    onChange={onChangeHandler}/>\r\n\r\n            <EditableSpan title={props.task.title} changeTitle={onTitleChangeHandler}/>\r\n            </span>\r\n\r\n            <IconButton onClick={onClickHandler}\r\n                        color={'secondary'}\r\n            >\r\n                <Delete/>\r\n            </IconButton>\r\n        </li>\r\n    )\r\n})","import {TaskStateType} from \"../app/App\";\r\nimport {AddTodoListAT, RemoveTodoListAT, SetTodoListsAT} from \"./todolists-reducer\";\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistApi, UpdateTaskModelType} from \"../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../app/store\";\r\nimport {setAppErrorAC, SetErrorActionType, setAppStatusAC, SetStatusActionType, ActionsType} from \"../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    taskId: string\r\n    todoListId: string\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    task: TaskType\r\n}\r\n\r\nexport type UpdateTaskActionType = {\r\n    type: 'UPDATE-TASK'\r\n    taskID: string\r\n    model: UpdateDomainTaskModelType\r\n    todoListID: string\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    taskID: string\r\n    newTitle: string\r\n    todoListID: string\r\n}\r\n\r\nexport type SetTasksActionType = {\r\n    type: 'SET-TASKS',\r\n    tasks: Array<TaskType>,\r\n    todoListID: string\r\n}\r\n\r\nexport type ActionUnionType =\r\n    RemoveTaskActionType | AddTaskActionType | UpdateTaskActionType | ChangeTaskTitleActionType |\r\n    AddTodoListAT | RemoveTodoListAT | SetTodoListsAT | SetTasksActionType | ActionsType\r\n\r\nconst initialState: TaskStateType = {}\r\n\r\nexport const tasksReducer =\r\n    (state = initialState, action: ActionUnionType): TaskStateType => {\r\n        switch (action.type) {\r\n            case 'REMOVE-TASK':\r\n                let todoListTasks = state[action.todoListId];\r\n                todoListTasks.filter(task => task.id !== action.taskId);\r\n                // todoListTasks = todoListTasks.filter(task => task.id !== action.taskId);\r\n                return {\r\n                    ...state,\r\n                    [action.todoListId]: state[action.todoListId].filter(task => task.id !== action.taskId)\r\n                }\r\n            case 'ADD-TASK': {\r\n                const stateCopy = {...state}\r\n                const newTask = action.task\r\n                const tasks = stateCopy[newTask.todoListId]\r\n                const newTasks = [newTask, ...tasks]\r\n                stateCopy[newTask.todoListId] = newTasks\r\n                return stateCopy\r\n            }\r\n            case 'UPDATE-TASK':\r\n                return {\r\n                    ...state, [action.todoListID]: state[action.todoListID].map(task => {\r\n                        if (task.id === action.taskID) {\r\n                            return {...task, ...action.model}\r\n                        } else return task\r\n                    })\r\n                }\r\n            case 'CHANGE-TASK-TITLE':\r\n                return {\r\n                    ...state, [action.todoListID]: state[action.todoListID].map(task => {\r\n                        if (task.id === action.taskID) {\r\n                            return {...task, title: action.newTitle}\r\n                        } else return task\r\n\r\n                    })\r\n                }\r\n            case 'ADD-TODOLIST':\r\n                return {\r\n                    ...state,\r\n                    [action.todolist.id]: []\r\n                }\r\n            case 'REMOVE-TODOLIST':\r\n                let newState = {...state}\r\n                delete newState[action.todoListID]\r\n                return newState\r\n            case 'SET-TODOLISTS':\r\n                const copyState = {...state};\r\n                action.todoLists.forEach(tl => {\r\n                    copyState[tl.id] = [];         // задаем новое св-во id\r\n                })\r\n                return copyState;\r\n            case 'SET-TASKS': {\r\n                const copyState = {...state}\r\n                copyState[action.todoListID] = action.tasks       //нужно обратится к нужному св-ву по todolistid который из action приходит\r\n                return copyState;\r\n            }                                                    //чтобы обратится к нужному массиву для нужного тудулиста\r\n                                                                 // и просто переопределить массив его тасок\r\n            default:\r\n                return state\r\n        }\r\n    }\r\n\r\n\r\nexport const removeTaskAC = (taskId: string, todoListId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskId: taskId, todoListId: todoListId}\r\n}\r\nexport const addTaskAC = (task: TaskType): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', task}\r\n}\r\nexport const updateTaskAC = (taskID: string, model: UpdateDomainTaskModelType, todoListID: string):\r\n    UpdateTaskActionType => {\r\n    return {type: 'UPDATE-TASK', taskID: taskID, model, todoListID: todoListID}\r\n}\r\nexport const ChangeTaskTitleAC = (taskID: string, newTitle: string, todoListID: string):\r\n    ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', taskID: taskID, newTitle: newTitle, todoListID: todoListID}\r\n}\r\nexport const SetTasksAC = (tasks: Array<TaskType>, todoListID: string): SetTasksActionType => {\r\n    return {type: 'SET-TASKS', tasks, todoListID}\r\n}\r\n\r\n//THUNK - ф-ция которая делает асинхронную операцию и по итогу диспатчит экшн\r\n\r\n//thunkCreator\r\n\r\nexport const fetchTasksTC = (todoListID: string) => {\r\n    return (dispatch: Dispatch<ActionUnionType | SetStatusActionType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistApi.getTasks(todoListID)\r\n            .then((res) => {\r\n                const tasks = res.data.items\r\n                dispatch(SetTasksAC(tasks, todoListID))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n\r\n    }\r\n}  //замыкание - здесь наша санка использует параметры из санккреатора           !!!!!!!\r\n\r\nexport const removeTaskTC = (taskID: string, todoListID: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistApi.deleteTask(todoListID, taskID)\r\n            .then((res) => {\r\n                dispatch(removeTaskAC(taskID, todoListID))\r\n            })\r\n    }\r\n}\r\n\r\nexport const addTaskTC = (todolistId: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionUnionType | SetErrorActionType>) => {\r\n        todolistApi.createTask(todolistId, title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTaskAC(res.data.data.item))\r\n                } else {\r\n                    if (res.data.messages.length) {\r\n                        dispatch(setAppErrorAC(res.data.messages[0]))\r\n                    } else {\r\n                        setAppErrorAC('some error occurred')\r\n                    }\r\n                    dispatch(setAppStatusAC('failed'))\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport const updateTaskTC = (taskID: string, domainModel: UpdateDomainTaskModelType, todoListID: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType): void => {\r\n        const state = getState()\r\n        const task = state.tasks[todoListID].find(t => t.id === taskID)\r\n        if (!task) {\r\n            console.warn('task is not found in the state')\r\n            return\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            status: task.status,\r\n            title: task.title,\r\n            ...domainModel     //у domainModel может быть только одно свойство, мы его перезатрем а остальные оставим\r\n        }\r\n        todolistApi.updateTask(todoListID, taskID, apiModel)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskID, domainModel, todoListID)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}","import React, {useCallback, useEffect} from 'react';\r\nimport AddItemForm from \"../../../components/AddItemForm/AddItemForm\";\r\nimport EditableSpan from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Button, ButtonGroup, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolist-api\";\r\nimport {FilterValuesType, TodolistDomainType} from \"../../todolists-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksTC} from \"../../tasks-reducer\";\r\n\r\ntype TodoListPropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    addTask: (title: string, todoListID: string) => void\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    changeFilter: (value: FilterValuesType, todoListID: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todoListID: string) => void\r\n    removeTodolist: (todoListID: string) => void\r\n    changeTaskTitle: (taskID: string, newTitle: string, todoListID: string) => void\r\n    changeTodolistTitle: (title: string, todoListID: string) => void\r\n}\r\n\r\nconst TodoList = React.memo(({...props}: TodoListPropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.todolist.id)) //получить таски тудулиста\r\n    }, [dispatch])\r\n\r\n\r\n    // const {filter} = props\r\n\r\n    const onClickAllFilter = useCallback(() => props.changeFilter(\"all\", props.todolist.id),\r\n        [props.changeFilter, props.todolist.id])\r\n\r\n    const onClickActiveFilter = useCallback(() => props.changeFilter(\"active\", props.todolist.id),\r\n        [props.changeFilter, props.todolist.id])\r\n\r\n    const onClickCompletedFilter = useCallback(() => props.changeFilter(\"completed\", props.todolist.id),\r\n        [props.changeFilter, props.todolist.id])\r\n\r\n    const onClickRemoveTodolist = useCallback(() => props.removeTodolist(props.todolist.id),\r\n        [props.removeTodolist, props.todolist.id])\r\n\r\n    const addTask = useCallback((title: string) => props.addTask(title, props.todolist.id),\r\n        [props.addTask, props.todolist.id])\r\n\r\n    const changeTodolistTitle = useCallback((title: string) => props.changeTodolistTitle(title, props.todolist.id),\r\n        [props.changeTodolistTitle, props.todolist.id])\r\n\r\n    let tasksForTodolist = props.tasks;\r\n\r\n    if (props.todolist.filter === \"active\") {\r\n        tasksForTodolist = tasksForTodolist.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (props.todolist.filter === \"completed\") {\r\n        tasksForTodolist = tasksForTodolist.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    const removeTask = useCallback((taskId: string, todoListID: string) => {\r\n        props.removeTask(taskId, todoListID)\r\n    }, [props.removeTask])\r\n    const changeTaskStatus = useCallback((taskId: string, status: TaskStatuses, todoListID: string) => {\r\n        props.changeTaskStatus(taskId, status, todoListID)\r\n    }, [props.changeTaskStatus])\r\n    const changeTaskTitle = useCallback((taskId: string, newValue: string, todoListID: string) => {\r\n        props.changeTaskTitle(taskId, newValue, todoListID)\r\n    }, [props.changeTaskTitle])\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h3>\r\n                    <EditableSpan title={props.todolist.title} changeTitle={changeTodolistTitle}/>\r\n                    <IconButton onClick={onClickRemoveTodolist}\r\n                                color={'secondary'}\r\n                                disabled={props.todolist.entityStatus === 'loading'}>\r\n                        <Delete/>\r\n                    </IconButton>\r\n                </h3>\r\n                <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n                <ul style={{listStyle: 'none', paddingLeft: '0px'}}>\r\n                    {tasksForTodolist.map(t => {\r\n                        return <Task\r\n                            key={t.id}\r\n                            todoListID={props.todolist.id}\r\n                            task={t}\r\n                            removeTask={removeTask}\r\n                            changeTaskTitle={changeTaskTitle}\r\n                            changeTaskStatus={changeTaskStatus}/>\r\n                    })}\r\n                </ul>\r\n                <div>\r\n                    <ButtonGroup>\r\n                        <Button size={'small'}\r\n                                variant={props.todolist.filter === 'all' ? 'contained' : 'text'}\r\n                                color={'primary'}\r\n                                onClick={onClickAllFilter}>All</Button>\r\n                        <Button size={'small'}\r\n                                style={{marginLeft: 3}}\r\n                                variant={props.todolist.filter === 'active' ? 'contained' : 'text'}\r\n                                color={'primary'}\r\n                                onClick={onClickActiveFilter}>Active\r\n                        </Button>\r\n                        <Button size={'small'}\r\n                                style={{marginLeft: 3}}\r\n                                variant={props.todolist.filter === 'completed' ? 'contained' : 'text'}\r\n                                color={'primary'}\r\n                                onClick={onClickCompletedFilter}>Completed\r\n                        </Button>\r\n                    </ButtonGroup>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default TodoList;","import {todolistApi, TodolistType} from \"../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAppStatusAC, SetErrorActionType, SetStatusActionType} from \"../app/app-reducer\";\r\nimport {handleServerAppError} from \"../utils/error-utils\";\r\n\r\nexport type RemoveTodoListAT = {\r\n    type: 'REMOVE-TODOLIST'\r\n    todoListID: string\r\n}\r\n\r\nexport type AddTodoListAT = {\r\n    type: 'ADD-TODOLIST',\r\n    todolist: TodolistType\r\n}\r\n\r\ntype ChangeTodoListTitleAT = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    title: string,\r\n    todoListID: string\r\n}\r\n\r\ntype ChangeTodoListFilterAT = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    filter: FilterValuesType,\r\n    todoListID: string\r\n}\r\n\r\nexport type SetTodoListsAT = {             //для получения тудулистов\r\n    type: 'SET-TODOLISTS',\r\n    todoLists: Array<TodolistType>\r\n}\r\n\r\ntype ChangeTodoListEntityStatusAT = {\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS',\r\n    status: RequestStatusType,\r\n    todoListID: string\r\n}\r\n\r\nexport type ActionUnionType =\r\n    RemoveTodoListAT\r\n    | AddTodoListAT\r\n    | ChangeTodoListTitleAT\r\n    | ChangeTodoListFilterAT\r\n    | SetTodoListsAT\r\n    | ChangeTodoListEntityStatusAT\r\n\r\nconst initialState: TodolistDomainType[] = []\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'  // типизируем переменную filter\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport type ThunkDispatch = Dispatch<ActionUnionType | SetStatusActionType | SetErrorActionType>\r\n\r\nexport const todoListsReducer =\r\n    (state = initialState, action: ActionUnionType): Array<TodolistDomainType> => {\r\n        switch (action.type) {\r\n            case 'REMOVE-TODOLIST':\r\n                return state.filter(tl => tl.id !== action.todoListID)\r\n            case 'ADD-TODOLIST': {\r\n                const newTodolist: TodolistDomainType = {...action.todolist, filter: 'all', entityStatus: 'idle'}\r\n                //забираем все из того тодолиста что приходит с сервера + filter: 'all'\r\n                return [newTodolist, ...state]\r\n            }\r\n            case 'CHANGE-TODOLIST-TITLE':\r\n                return state.map(tl => tl.id === action.todoListID ? {...tl, title: action.title} : tl)\r\n            case 'CHANGE-TODOLIST-FILTER':\r\n                return state.map(tl => tl.id === action.todoListID ? {...tl, filter: action.filter} : tl)\r\n            case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n                return state.map(tl => tl.id === action.todoListID ? {...tl, entityStatus: action.status} : tl)\r\n            case 'SET-TODOLISTS':\r\n                return action.todoLists.map(tl => {\r\n                    return {\r\n                        ...tl,\r\n                        filter: 'all',\r\n                        entityStatus: 'idle'\r\n                    }\r\n                })\r\n            default:\r\n                return state\r\n        }\r\n    }\r\n\r\nexport const RemoveTodoListsAC = (todoListID: string): RemoveTodoListAT => {\r\n    return {type: \"REMOVE-TODOLIST\", todoListID} as const\r\n}\r\nexport const AddTodoListAC = (todolist: TodolistType): AddTodoListAT => {\r\n    return {type: 'ADD-TODOLIST', todolist} as const\r\n}\r\nexport const ChangeTodoListTitleAC = (title: string, todoListID: string): ChangeTodoListTitleAT => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', title, todoListID} as const\r\n}\r\nexport const ChangeTodoListFilterAC = (filter: FilterValuesType, todoListID: string): ChangeTodoListFilterAT => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', filter, todoListID} as const\r\n}\r\nexport const ChangeTodoListEntityStatusAC = (status: RequestStatusType, todoListID: string) => {\r\n    return {type: 'CHANGE-TODOLIST-ENTITY-STATUS', status, todoListID} as const\r\n}\r\nexport const setTodoListsAC = (todoLists: Array<TodolistType>): SetTodoListsAT => {\r\n    return {type: 'SET-TODOLISTS', todoLists} as const\r\n}\r\n\r\n//thunkCreator\r\n\r\nexport const fetchTodoListsTC = () => {\r\n    return (dispatch: ThunkDispatch): void => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        //1.side effect\r\n        todolistApi.getTodoLists()              //делаем запрос\r\n            .then((res) => {\r\n                //2.dispatch action\r\n                dispatch(setTodoListsAC(res.data))  //затем диспатчим\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch(error => {\r\n                handleServerAppError(error, dispatch)\r\n            })\r\n\r\n    }\r\n}\r\n\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(ChangeTodoListEntityStatusAC('loading', todolistId))\r\n        todolistApi.deleteTodo(todolistId)\r\n            .then((res) => {\r\n                dispatch(RemoveTodoListsAC(todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\n\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch): void => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistApi.createTodo(title)\r\n            .then((res) => {\r\n                dispatch(AddTodoListAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\n\r\nexport const changeTodolistTitleTC = (todolistId: string, title: string) => {\r\n    return (dispatch: Dispatch): void => {\r\n        todolistApi.updateTodoTitle(todolistId, title)\r\n            .then((res) => {\r\n                dispatch(ChangeTodoListTitleAC(title, todolistId))\r\n            })\r\n    }\r\n}","import React, {useCallback, useEffect} from \"react\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport AddItemForm from \"../components/AddItemForm/AddItemForm\";\r\nimport TodoList from \"../features/TodolistList/Todolist/todolist\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {\r\n    addTodolistTC,\r\n    ChangeTodoListFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodoListsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from \"../features/todolists-reducer\";\r\nimport {addTaskTC, removeTaskTC, updateTaskTC} from \"../features/tasks-reducer\";\r\nimport {TaskStatuses, TaskType} from \"../api/todolist-api\";\r\nimport {Redirect} from \"@reach/router\";\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>          //типизация для вычисляемого значения\r\n}\r\n\r\nexport const TodolistList = () => {\r\n    //BLL:\r\n    //для того чтобы забрать что нужно из redux используем useSelector\r\n    //для того чтобы задиспатчить что то в redux используем hook useDispatch, который нам возвращает\r\n    // функцию dispatch в который мы засовываем action который мы хотим как конструкцию отправить в redux\r\n\r\n    const todoLists = useSelector<AppRootStateType, TodolistDomainType[]>(state => state.todoLists)\r\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n    debugger;\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {     // если мы не залогинены, то будет прерывание\r\n           return\r\n        }\r\n        const thunk = fetchTodoListsTC()\r\n        dispatch(thunk)  //получение тудулистов\r\n    }, [dispatch]) // зависимостей нет, поэтому выполни его всего один раз когда вмонтируешься\r\n\r\n    const removeTask = useCallback(function (taskID: string, todoListID: string) {\r\n        const thunk = removeTaskTC(taskID, todoListID) //получаем санку при помощи санкреатора и диспатчим ее\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todoListID: string) => {\r\n        let action = addTaskTC(todoListID, title)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const changeTaskStatus = useCallback((taskID: string, status: TaskStatuses, todoListID: string) => {\r\n        let thunk = updateTaskTC(taskID, {status}, todoListID)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((taskID: string, newTitle: string, todoListID: string) => {\r\n        let action = updateTaskTC(taskID, {title: newTitle}, todoListID)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    //todolist:\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todoListID: string) => {\r\n        let action = ChangeTodoListFilterAC(value, todoListID)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((title: string, todoListID: string) => {\r\n        let thunk = changeTodolistTitleTC(todoListID, title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((todoListID: string) => {\r\n        let action = removeTodolistTC(todoListID)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        let thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        debugger\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px 0px '}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todoLists.map(tl => {\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper elevation={10}\r\n                               style={{\r\n                                   padding: '15px',\r\n                                   borderRadius: '10px',\r\n                                   border: '1px solid lightblue'\r\n                               }}>\r\n                            <TodoList\r\n                                key={tl.id}                   //id for react мы его не используем\r\n                                todolist={tl}\r\n                                tasks={tasks[tl.id]}\r\n                                addTask={addTask}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                changeTaskStatus={changeTaskStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {AppBar, Button, Container, IconButton, LinearProgress, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {initializedAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport {Login} from \"../login/login\";\r\nimport {TodolistList} from './TodolistList';\r\nimport {BrowserRouter, Route} from \"react-router-dom\";\r\nimport {Routes} from \"react-router-dom\";\r\nimport {TaskType} from \"../api/todolist-api\";\r\nimport {CircularProgress} from \"@mui/material\";\r\nimport {logoutTC} from \"../login/auth-reducer\";\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>          //типизация для вычисляемого значения\r\n}\r\n\r\nexport const App = () => {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    //при запуске тут false, видим крутилку\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {             //санка которая делает запрос на me\r\n        const thunk = initializedAppTC()\r\n        dispatch(thunk)\r\n    }, [dispatch]) //пустой массив зависимостей, значит эффект будет вызван один раз\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [dispatch])\r\n\r\n    if (!isInitialized) { //крутилка, при инициализации\r\n        debugger\r\n        return <div style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <div>\r\n                <ErrorSnackbar/>\r\n                <AppBar position={'static'}>\r\n                    <Toolbar style={{justifyContent: 'space-between'}}>\r\n                        <IconButton color={'inherit'}>\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant={'h6'}>\r\n                            TodoLists\r\n                        </Typography>\r\n                        {isLoggedIn &&      //если залогинены, то покажи эту кнопку --->\r\n                        <Button color={'inherit'} variant={'outlined'} onClick={logoutHandler}>Log out</Button>}\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress/>}\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <Routes>\r\n                        <Route path='/todolist-1' element={<TodolistList/>}/>\r\n                        <Route path='/login' element={<Login/>}/>\r\n                    </Routes>\r\n                </Container>\r\n            </div>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n","import {tasksReducer} from '../features/tasks-reducer';\r\nimport {todoListsReducer} from '../features/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../login/auth-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todoListsReducer,\r\n    app: appReducer,\r\n    login: authReducer,\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware)); //thunkMiddleware - перехватывает каждый dispatch,\r\n// action пропускает дальше, а ф-ции к примеру нашу санку он запустит и дальше не пустит в редьюсер,\r\n// потому что редьюсер ждет только простой экшн\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {App} from \"./app/App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\nimport AppWithReducers from \"./app/AppWithReducers\";\r\n\r\nconst AppWithReducersComponent = AppWithReducers\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}